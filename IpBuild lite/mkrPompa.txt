#include <SPI.h>
#include <WiFi101.h>
#include <PubSubClient.h>
#include <DHT.h>



// Update these with values suitable for your network.
byte mac[]    = {  0xDE, 0xED, 0xBA, 0xFE, 0xFE, 0xED };
  char ssid[] = "Rete-Test";        // your network SSID (name)
  char pass[] = "Sofare17";    // your network password (use for WPA, or use as key for WEP)
  int keyIndex = 0;
  int status = WL_IDLE_STATUS;

IPAddress server(192, 168, 1, 245);
IPAddress ip(192,168,1,246);
WiFiClient wifiClient;
PubSubClient client(wifiClient);

#define RELAY1 2// pin digitali ai quali sono connessi i relè
#define RELAY2 1
#define RELAY3 3
#define RELAY4 4
#define BUTTON1 5 
int btnState = 1;

void setup()
{
  Serial.begin(9600);
  
  WiFi.config(ip); 
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);
    
    delay(1000);
  }
  
  Serial.println("Connected to wifi");
  client.setServer(server, 1883);
  client.setCallback(callback);
  
  pinMode(RELAY1, OUTPUT); //setto la modalità dei pin digitali relativi ai relè
  pinMode(RELAY2, OUTPUT);
  pinMode(RELAY3, OUTPUT);
  pinMode(RELAY4, OUTPUT);
  pinMode(BUTTON1, INPUT);
  delay(1500);
}

void loop()
{
  if (!client.connected()) {
      Serial.print("Attempting MQTT connection...");
      // Attempt to connect
      if (client.connect("arduinoClient")) {
        Serial.println("connected");
        // Once connected, publish an announcement...
         client.subscribe("AttivaRele",0);
         client.subscribe("DisattivaRele",0);
         client.subscribe("RSSI",0);
      } else {
        Serial.print("failed, rc=");
        Serial.print(client.state());
        Serial.println(" try again in 5 seconds");
        Serial.println("Scanning available networks...");
        listNetworks();
        // Wait 5 seconds before retrying
       delay(5000);
      }
    }
   if(digitalRead(BUTTON1)== HIGH && btnState == 0){
          Serial.println("Button on");
    char val[]="on";
          client.publish("setrele2",val);
          btnState = 1;
         }
    if(digitalRead(BUTTON1)==LOW && btnState == 1){
      Serial.println("Button off");
      char val[]="off";
      client.publish("setrele2",val);
      btnState = 0;
    }
   client.loop();
}





void callback(char* topic, byte* payload, unsigned int length) {
  
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  String message = "";
  String top = String(topic);
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
    message += (char)payload[i];
  }
  Serial.println();
 
   if(top == "AttivaRele"){
    int n = message.toInt();
    String attivo = AttivaRele(n);
    int m = sizeof(attivo);
    char val[m];
    strncpy(val, attivo.c_str(),m);
  
    if(n==1)
    client.publish("checkrele1",val);
    if(n==2)
    client.publish("checkrele2",val);
    Serial.println(val);

   }
   
   if(top == "DisattivaRele"){
    int n = message.toInt();
    String disattivo = DisattivaRele(n);
    int m = sizeof(disattivo);
    char val[m];
    strncpy(val, disattivo.c_str(), m);
    if(n==1)
    client.publish("checkrele1",val);
    if(n==2)
    client.publish("checkrele2",val);
    Serial.println(val);
   }
   if(top == "RSSI"){
    String messaggio =String(WiFi.RSSI());
    int m = sizeof(messaggio);
    char val[m];
    strncpy(val, messaggio.c_str(), m);
    client.publish("wifiStrengthPompa",val);
    Serial.println(val);
   }
   
}

String AttivaRele(int numerorele) {
  if (numerorele == 1)
    digitalWrite(RELAY1, LOW);
  if (numerorele == 2)
    digitalWrite(RELAY2, LOW);
  if (numerorele == 3)
    digitalWrite(RELAY3, LOW);
  if (numerorele == 4)
    digitalWrite(RELAY4, LOW);
  String ret = "on";
  return ret;
}
String DisattivaRele(int numerorele) {
  if (numerorele == 1)
    digitalWrite(RELAY1, HIGH);
  if (numerorele == 2)
    digitalWrite(RELAY2, HIGH);
  if (numerorele == 3)
    digitalWrite(RELAY3, HIGH);
  if (numerorele == 4)
    digitalWrite(RELAY4, HIGH);
  String ret = "off";
  return ret;
}


//funzioni per rilevamento wifi nella zona
void listNetworks() {
  // scan for nearby networks:
  Serial.println("** Scan Networks **");
  int numSsid = WiFi.scanNetworks();
  if (numSsid == -1)
  {
    Serial.println("Couldn't get a wifi connection");
    while (true);
  }

  // print the list of networks seen:
  Serial.print("number of available networks:");
  Serial.println(numSsid);

  // print the network number and name for each network found:
  for (int thisNet = 0; thisNet < numSsid; thisNet++) {
    Serial.print(thisNet);
    Serial.print(") ");
    Serial.print(WiFi.SSID(thisNet));
    Serial.print("\tSignal: ");
    Serial.print(WiFi.RSSI(thisNet));
    Serial.print(" dBm");
    Serial.print("\tEncryption: ");
    printEncryptionType(WiFi.encryptionType(thisNet));
    Serial.flush();
  }
}

void printEncryptionType(int thisType) {
  // read the encryption type and print out the name:
  switch (thisType) {
    case ENC_TYPE_WEP:
      Serial.println("WEP");
      break;
    case ENC_TYPE_TKIP:
      Serial.println("WPA");
      break;
    case ENC_TYPE_CCMP:
      Serial.println("WPA2");
      break;
    case ENC_TYPE_NONE:
      Serial.println("None");
      break;
    case ENC_TYPE_AUTO:
      Serial.println("Auto");
      break;
  }
}


